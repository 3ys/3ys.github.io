<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C#学习笔记(2)—初识C#</title>
      <link href="/2019/12/21/hou-duan/c/c-xue-xi-bi-ji-2-c-ji-chu-gai-nian-shu-li/"/>
      <url>/2019/12/21/hou-duan/c/c-xue-xi-bi-ji-2-c-ji-chu-gai-nian-shu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-方法-methods"><a href="#1-方法-methods" class="headerlink" title="1.方法(methods)"></a>1.方法(methods)</h2><ul><li>方法：纯面向对象语言，方法不能独立于类之外，它是类的成员(成员函数)</li><li>(实例)构造器(instance constructor)：它是类的成员，构建实例的方法<ul><li>构造器声明快捷方式：<code>prop</code>+<code>tab</code>x2</li></ul></li><li>重载(Overload)：同名不同参或不同返回值类型</li></ul><h2 id="2-操作符"><a href="#2-操作符" class="headerlink" title="2.操作符"></a>2.操作符</h2><p>略…</p><h2 id="3-表达式、语句"><a href="#3-表达式、语句" class="headerlink" title="3.表达式、语句"></a>3.表达式、语句</h2><p>略…</p><h2 id="4-字段、属性、索引器、常量"><a href="#4-字段、属性、索引器、常量" class="headerlink" title="4.字段、属性、索引器、常量"></a>4.字段、属性、索引器、常量</h2><ul><li>字段(field)：即成员变量，内部存储。</li><li>属性(property)：C#特有，从<code>Get/Set</code>方法进化而来，由外部访问，保护字段值合理<ul><li>属性完整声明快捷方式：<code>propfull</code>+<code>tab</code>x2</li><li>属性简略声明快捷方式：<code>prop</code>+<code>tab</code>x2，此时不能保护字段</li></ul></li><li>索引器：略</li><li>常量：略</li></ul><h2 id="5-传值、输出、引用、数组、具名、可选参数、扩展方法"><a href="#5-传值、输出、引用、数组、具名、可选参数、扩展方法" class="headerlink" title="5.传值、输出、引用、数组、具名、可选参数、扩展方法"></a>5.传值、输出、引用、数组、具名、可选参数、扩展方法</h2><ul><li>传值参数:参数的默认传递方式</li><li>输出参数:使用<code>out</code>关键字，用于除返回值外还需要输出的场景</li><li>引用参数:使用<code>ref</code>关键字，用于需要修改实际参数值的场景</li><li>数组参数:使用<code>params</code>关键字，用于简化方法的调用</li><li>具名参数:使用<code>参数名：参数值</code>，提高可读性，不再限定参数输入顺序</li><li>可选参数:参数赋予默认值后可实现可选输入</li><li>扩展方法(this参数) :为目标数据类型“追加”方法<ul><li>方法必须是公有的、静态的，即由<code>public static</code>修饰</li><li>只能用<code>this</code>修饰形参列表中的第一个</li><li>一般由一个静态类(一般命名为<code>TypeExtention</code>)来收纳扩展方法</li></ul></li></ul><h2 id="6-委托"><a href="#6-委托" class="headerlink" title="6.委托"></a>6.委托</h2><h2 id="7-事件"><a href="#7-事件" class="headerlink" title="7.事件"></a>7.事件</h2><h2 id="8-类"><a href="#8-类" class="headerlink" title="8.类"></a>8.类</h2><h2 id="9-继承"><a href="#9-继承" class="headerlink" title="9.继承"></a>9.继承</h2><h2 id="10-重写、多态"><a href="#10-重写、多态" class="headerlink" title="10.重写、多态"></a>10.重写、多态</h2><h2 id="11-抽象类与开闭原则"><a href="#11-抽象类与开闭原则" class="headerlink" title="11.抽象类与开闭原则"></a>11.抽象类与开闭原则</h2><h2 id="12-接口，依赖反转、单元测试"><a href="#12-接口，依赖反转、单元测试" class="headerlink" title="12.接口，依赖反转、单元测试"></a>12.接口，依赖反转、单元测试</h2><h2 id="13-接口隔离、反射、特性、依赖注入"><a href="#13-接口隔离、反射、特性、依赖注入" class="headerlink" title="13.接口隔离、反射、特性、依赖注入"></a>13.接口隔离、反射、特性、依赖注入</h2><h2 id="14-泛型、部分类、枚举、结构体"><a href="#14-泛型、部分类、枚举、结构体" class="headerlink" title="14.泛型、部分类、枚举、结构体"></a>14.泛型、部分类、枚举、结构体</h2>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名、服务器与备案相关流程整理</title>
      <link href="/2019/12/20/qian-duan/yu-ming-fu-wu-qi-yu-bei-an-xiang-guan-liu-cheng-zheng-li/"/>
      <url>/2019/12/20/qian-duan/yu-ming-fu-wu-qi-yu-bei-an-xiang-guan-liu-cheng-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-阿里云购买学生服务器"><a href="#1-阿里云购买学生服务器" class="headerlink" title="1. 阿里云购买学生服务器"></a>1. 阿里云购买学生服务器</h2><p>“云翼计划(<a href="https://promotion.aliyun.com/ntms/campus2017.html" target="_blank" rel="noopener">https://promotion.aliyun.com/ntms/campus2017.html</a>)”——优惠享受流程：① 注册阿里云账号 → ② 完成实名认证 → ③ 完成学生认证 → ④ 购买优惠产品（24岁以下自动获得学生身份）</p><p><img src="https://cdn.jsdelivr.net/gh/3ys/cdn@20191229/medias/Blog/%E4%BA%91%E7%BF%BC%E8%AE%A1%E5%88%92.jpg" alt="云翼计划"></p><p>价格与腾讯学生服务器差不多，但是就云服务器控制台的操作逻辑、UI布局来说，个人更偏好于使用阿里云服务器。(以下操作均以阿里云为例)</p><h2 id="2-域名购买、解析与网站备案"><a href="#2-域名购买、解析与网站备案" class="headerlink" title="2. 域名购买、解析与网站备案"></a>2. 域名购买、解析与网站备案</h2><h3 id="2-1域名购买"><a href="#2-1域名购买" class="headerlink" title="2.1域名购买"></a>2.1域名购买</h3><p>阿里云网站内直接搜索“域名”，会出现如下界面：<br><img src="https://cdn.jsdelivr.net/gh/3ys/cdn@20191229/medias/Blog/%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E4%B8%8E%E8%A7%A3%E6%9E%90.jpg" alt="域名购买与解析"><br>选择左侧菜单栏“我是卖家”下拉菜单，跳转万网惊进行域名购买。</p><h3 id="2-2域名解析"><a href="#2-2域名解析" class="headerlink" title="2.2域名解析"></a>2.2域名解析</h3><p>购买完成后，在“域名”控制台选择“解析”操作：<br><img src="https://cdn.jsdelivr.net/gh/3ys/cdn@20191229/medias/Blog/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.jpg" alt="域名解析"></p><h3 id="2-3域名绑定"><a href="#2-3域名绑定" class="headerlink" title="2.3域名绑定"></a>2.3域名绑定</h3><p>“服务器控制台”进行绑定域名操作<br><img src="https://cdn.jsdelivr.net/gh/3ys/cdn@20191229/medias/Blog/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0.jpg" alt="服务器控制台"></p><h3 id="2-4网站备案"><a href="#2-4网站备案" class="headerlink" title="2.4网站备案"></a>2.4网站备案</h3><p>直接搜“备案”，按步骤提示来就行，中途会进行人脸识别、身份证上传等操作。之后阿里工作人员会电话确认相关信息，然后才会提交管局审核，管局审核期一般在10个工作日左右。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Halo博客部署</title>
      <link href="/2019/12/20/qian-duan/halo-bo-ke-bu-shu/"/>
      <url>/2019/12/20/qian-duan/halo-bo-ke-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Halo简介"><a href="#1-Halo简介" class="headerlink" title="1.Halo简介"></a>1.Halo简介</h2><p>一款现代化的个人独立博客系统 。</p><ul><li><strong>快速部署</strong><br>一条命令即可启动，完全没有上手难度。  </li><li><strong>多主题</strong><br>完备的主题系统，支持在线下载和在线更新，并提供 9 款主题可供选择（主题开发文档正在开发中）。  </li><li><strong>拓展性</strong><br>提供 Content Api 和 Admin Api。你可以用于开发单页面应用，微信小程序，桌面端管理软件，管理 APP（已有）等。  </li><li><strong>附件管理</strong><br>支持本地上传，又拍云/七牛云/阿里云/SM.MS 等存储服务。  </li><li><strong>评论管理</strong><br>拥有独立的评论插件，使用 Vue 开发，只需在页面引入构建好的 JS 文件即可，完美地和主题相结合。  </li><li><strong>APP</strong><br>拥有使用 Flutter 开发的管理端 APP，支持 Android 和 iOS，随时随地发表你的想法。(作者暂时没有维护)  </li></ul><h2 id="2-在-Linux-服务器部署-Halo"><a href="#2-在-Linux-服务器部署-Halo" class="headerlink" title="2.在 Linux 服务器部署 Halo"></a>2.在 Linux 服务器部署 Halo</h2><h3 id="2-1-环境要求"><a href="#2-1-环境要求" class="headerlink" title="2.1 环境要求"></a>2.1 环境要求</h3><p>① CentOS 7.x<br>② 512 MB 以上内存<br>③ 设置 A 记录并指向服务器的 IP 地址，并确保已经正确解析以及没有被工信部拦截（国内服务器需备案）</p><h3 id="2-2-服务器配置"><a href="#2-2-服务器配置" class="headerlink" title="2.2 服务器配置"></a>2.2 服务器配置</h3><h4 id="2-2-1-更新软件包"><a href="#2-2-1-更新软件包" class="headerlink" title="2.2.1 更新软件包"></a>2.2.1 更新软件包</h4><pre class=" language-vim"><code class="language-vim">#确保服务器的软件包已经是最新sudo yum <span class="token keyword">update</span> <span class="token operator">-</span><span class="token keyword">y</span></code></pre><h4 id="2-2-2-安装-Java-运行环境"><a href="#2-2-2-安装-Java-运行环境" class="headerlink" title="2.2.2 安装 Java 运行环境"></a>2.2.2 安装 Java 运行环境</h4><pre class=" language-vim"><code class="language-vim">#安装 OpenJDK 软件包sudo yum install java<span class="token operator">-</span><span class="token number">1.8</span><span class="token operator">.</span><span class="token number">0</span><span class="token operator">-</span>openjdk <span class="token operator">-</span><span class="token keyword">y</span># 检测是否安装成功java <span class="token operator">-</span><span class="token keyword">version</span></code></pre><h3 id="2-3-安装-Halo"><a href="#2-3-安装-Halo" class="headerlink" title="2.3 安装 Halo"></a>2.3 安装 Halo</h3><h4 id="2-3-1-下载Halo安装包——注意安装包位置"><a href="#2-3-1-下载Halo安装包——注意安装包位置" class="headerlink" title="2.3.1 下载Halo安装包——注意安装包位置"></a>2.3.1 下载Halo安装包——注意安装包位置</h4><pre class=" language-vim"><code class="language-vim"># 下载最新的 Halo 安装包，<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">version</span><span class="token punctuation">}</span><span class="token punctuation">}</span> 为版本号，目前为<span class="token number">1.1</span><span class="token operator">.</span><span class="token number">1</span>wget http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>halo<span class="token operator">.</span>ryanc<span class="token operator">.</span><span class="token keyword">cc</span><span class="token operator">/</span>release<span class="token operator">/</span>halo<span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">version</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">.</span>jar <span class="token operator">-</span>O halo<span class="token operator">-</span>latest<span class="token operator">.</span>jar# 启动测试java <span class="token operator">-</span>jar halo<span class="token operator">-</span>latest<span class="token operator">.</span>jar</code></pre><blockquote><p><strong>重要：</strong><br>以上的启动仅仅为测试 Halo 是否可以通过 <code>IP:端口</code> 访问，如果我们关闭 ssh 连接，Halo 也将被关闭。要想一直处于运行状态，需要继续进行设置。（<strong>值得注意的是——控制台测试过程中，可以看到Halo安装包存放的绝对目录！！！</strong>）</p></blockquote><h4 id="2-3-2-进阶配置——开机启动"><a href="#2-3-2-进阶配置——开机启动" class="headerlink" title="2.3.2 进阶配置——开机启动"></a>2.3.2 进阶配置——开机启动</h4><pre class=" language-vim"><code class="language-vim"># 下载 Halo 官方的 halo<span class="token operator">.</span>service 模板sudo curl <span class="token operator">-</span><span class="token keyword">o</span> <span class="token operator">/</span>etc<span class="token operator">/</span>systemd<span class="token operator">/</span>system<span class="token operator">/</span>halo<span class="token operator">.</span>service <span class="token operator">-</span><span class="token operator">-</span>create<span class="token operator">-</span>dirs http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>halo<span class="token operator">.</span>ryanc<span class="token operator">.</span><span class="token keyword">cc</span><span class="token operator">/</span>config<span class="token operator">/</span>halo<span class="token operator">.</span>service# 修改 halo<span class="token operator">.</span>servicesudo <span class="token keyword">vim</span> <span class="token operator">/</span>etc<span class="token operator">/</span>systemd<span class="token operator">/</span>system<span class="token operator">/</span>halo<span class="token operator">.</span>service</code></pre><p>打开修改页面如下</p><pre class=" language-vim"><code class="language-vim"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>Halo ServiceDocumentation<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>halo<span class="token operator">.</span>runAfter<span class="token operator">=</span>network<span class="token operator">-</span>online<span class="token operator">.</span>targetWants<span class="token operator">=</span>network<span class="token operator">-</span>online<span class="token operator">.</span>target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Type<span class="token operator">=</span>simpleExecStart<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>java <span class="token operator">-</span>server <span class="token operator">-</span>Xms256m <span class="token operator">-</span>Xmx256m <span class="token operator">-</span>jar JAR_PATHExecStop<span class="token operator">=</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>kill <span class="token operator">-</span>s QUIT $MAINPIDRestart<span class="token operator">=</span>alwaysStandOutput<span class="token operator">=</span>syslogStandError<span class="token operator">=</span>inherit<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi<span class="token operator">-</span>user<span class="token operator">.</span>target</code></pre><blockquote><p>JAR_PATH：更改为 Halo 安装包的绝对路径，例如：<code>/www/wwwroot/halo-latest.jar</code> 或者 <code>/root/halo-latest.jar</code> 或者其他地址, 具体参见测试启动日志中安装地址。</p></blockquote><pre class=" language-vim"><code class="language-vim"># 修改 service 文件之后需要刷新 Systemdsudo systemctl daemon<span class="token operator">-</span>reload# 使 Halo 开机自启sudo systemctl enable halo# 启动 Halosudo service halo start# 重启 Halosudo service halo restart# 停止 Halosudo service halo <span class="token keyword">stop</span># 查看 Halo 的运行状态sudo service halo status</code></pre><p>完成以上操作即可通过 <code>IP:端口</code> 访问了，端口默认8090。</p><h2 id="3-配置域名访问——使用-Caddy-进行反向代理"><a href="#3-配置域名访问——使用-Caddy-进行反向代理" class="headerlink" title="3.配置域名访问——使用 Caddy 进行反向代理"></a>3.配置域名访问——使用 Caddy 进行反向代理</h2><p>为了让域名也可以访问到 Halo 需要进行如下设置。</p><blockquote><p>Caddy 是一款使用 Go 语言开发的 Web 服务器。其配置更为简洁，并可以自动申请及配置 SSL 证书（官方推荐）。</p></blockquote><h3 id="3-1-安装-Caddy"><a href="#3-1-安装-Caddy" class="headerlink" title="3.1 安装 Caddy"></a>3.1 安装 Caddy</h3><pre class=" language-vim"><code class="language-vim"># 安装 Caddy 软件包yum install caddy <span class="token operator">-</span><span class="token keyword">y</span></code></pre><h3 id="3-2-配置-Caddy"><a href="#3-2-配置-Caddy" class="headerlink" title="3.2 配置 Caddy"></a>3.2 配置 Caddy</h3><pre class=" language-vim"><code class="language-vim"># 下载 Halo 官方的 Caddy 配置模板curl <span class="token operator">-</span><span class="token keyword">o</span> <span class="token operator">/</span>etc<span class="token operator">/</span>caddy<span class="token operator">/</span><span class="token keyword">conf</span><span class="token operator">.</span><span class="token keyword">d</span><span class="token operator">/</span>Caddyfile<span class="token operator">.</span><span class="token keyword">conf</span> <span class="token operator">-</span><span class="token operator">-</span>create<span class="token operator">-</span>dirs http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>halo<span class="token operator">.</span>ryanc<span class="token operator">.</span><span class="token keyword">cc</span><span class="token operator">/</span>config<span class="token operator">/</span>Caddyfile# 使用 <span class="token keyword">vim</span> 编辑 Caddyfile<span class="token keyword">vim</span> <span class="token operator">/</span>etc<span class="token operator">/</span>caddy<span class="token operator">/</span><span class="token keyword">conf</span><span class="token operator">.</span><span class="token keyword">d</span><span class="token operator">/</span>Caddyfile<span class="token operator">.</span><span class="token keyword">conf</span></code></pre><p>打开修改页面如下</p><pre class=" language-vim"><code class="language-vim">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token operator">.</span>simple<span class="token operator">.</span><span class="token builtin">com</span> <span class="token punctuation">{</span> gzip tls xxxx@xxx<span class="token operator">.</span>xx proxy <span class="token operator">/</span> localhost<span class="token punctuation">:</span>port <span class="token punctuation">{</span>  transparent <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>1.<code>https://www.simple.com</code> 改为自己的域名;<br>2.<code>xxxx@xxx.xx</code> 改为自己的邮箱地址，这是用于自动申请 SSL 证书用的。不需要自己配置 SSL 证书，会自动帮你续签;<br>3.port修改为 Halo 的运行端口，默认为 8090。</p></blockquote><p>修改完成之后启动 Caddy 服务，并查看Caddy运行状态。</p><pre class=" language-vim"><code class="language-vim"># 开启自启 Caddy 服务systemctl enable caddy# 启动 Caddyservice caddy start# 停止运行 Caddyservice caddy <span class="token keyword">stop</span># 重启 Caddyservice caddy restart# 查看 Caddy 运行状态service caddy status</code></pre><blockquote><p><strong>重要：</strong><br>如果 Caddy 启动出现问题，使用 <code>yum update -y</code> 更新系统。然后再使用 <code>service caddy restart</code> 重启即可，已知 CentOS 7.3 会出现该问题。</p></blockquote><h2 id="4-Halo控制台创建自己的博客"><a href="#4-Halo控制台创建自己的博客" class="headerlink" title="4.Halo控制台创建自己的博客"></a>4.Halo控制台创建自己的博客</h2><p>待续。。。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#学习笔记(1)—初识C#</title>
      <link href="/2019/12/20/hou-duan/c/c-xue-xi-bi-ji-1-chu-shi-c/"/>
      <url>/2019/12/20/hou-duan/c/c-xue-xi-bi-ji-1-chu-shi-c/</url>
      
        <content type="html"><![CDATA[<h2 id="1-C-与-NET简介"><a href="#1-C-与-NET简介" class="headerlink" title="1.C# 与.NET简介"></a>1.C# 与.NET简介</h2><ul><li><p>.NET的编程语言：.NET平台编程语言包括C#、F#、VB。</p></li><li><p>.NET的应用：桌面程序、Web、手机程序、游戏开发、机器学习、云计算、微服务、物联网。</p></li><li><ul><li>Desktop: <strong>WPF</strong>、<strong>Forms</strong>、UWP</li></ul></li><li><p>Web: <strong>ASP.NET</strong></p><ul><li>Mobile: Xamarin</li></ul></li><li><p>Gaming: <strong>Unity</strong>…</p><ul><li>IoT: UWP</li><li>…….</li></ul></li><li><p>C# 语言介绍</p><p>C# 源文件的文件扩展名通常为 <strong><code>.cs</code></strong>。<strong><code>Main</code> 静态方法</strong>是程序的入口点，但是库(dll)（不含 <code>Main</code> 入口点的代码）。</p></li><li><p>.NET Framework 平台体系结构</p><p>  C# 程序<strong>在 .NET Framework 上运行</strong>，用 C# 编写的<strong>源代码</strong>被编译成符合 CLI 规范的<strong><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/managed-code" target="_blank" rel="noopener">中间语言 (IL)</a></strong>。 IL 代码和资源（如位图和字符串）存储在磁盘上名为“<strong>程序集</strong>”的可执行文件（扩展名通常为 .exe 或 .dll）中。 程序集包含一个介绍程序集的类型、版本、区域性和安全要求的清单。</p><p>  当 C# 程序执行时，程序集会加载到 <strong>CLR</strong> 中，可能根据清单中的信息执行各种操作。 然后，如果满足安全要求，CLR 会直接执行实时 (JIT) <strong>编译</strong>，将 IL 代码转换成<strong>本机指令</strong>。 CLR 还提供其他与自动垃圾回收、异常处理和资源管理相关的服务。 </p><p>![体系结构](<a href="https://cdn.jsdelivr.net/gh/3ys/cdn@20191229/medias/Blog/.NET" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/3ys/cdn@20191229/medias/Blog/.NET</a> Framework.png)</p><h2 id="2-C-程序结构"><a href="#2-C-程序结构" class="headerlink" title="2. C# 程序结构"></a>2. C# 程序结构</h2></li></ul><p>C# 中的关键组织结构概念包括：<strong>程序集</strong>、<strong>程序</strong>、<strong>命名空间</strong>、<strong>类型</strong>、<strong>成员</strong>。 C# <strong>程序</strong>由一个或多个源文件组成。 程序声明<strong>类型</strong>，而类型则包含<strong>成员</strong>，并被整理到<strong>命名空间</strong>中。编译完的 C# 程序实际上会打包到<strong>程序集</strong>中。</p><p> 类型示例包括：类和接口。 成员示例包括：字段、方法、属性和事件。  程序集的文件扩展名通常为 <code>.exe</code> 或 <code>.dll</code>，具体取决于实现的是<strong>应用程序</strong>还是<strong>库</strong>。</p><p>需要注意的是：</p><blockquote><ul><li><em>在 C# 中不需要使用<strong>前向声明</strong>，因为声明顺序无关紧要（除了极少数的例外情况）。</em></li></ul><ul><li><p><em>名称空间–&gt;类–&gt;成员，即由大到小的包含关系。<strong>不同名称空间可能有相同名称的类</strong>，所以即使导入名称空间也可能需要特指，否则会冲突。</em></p></li><li><p>类库引用</p><ul><li>DLL引用(<strong><em>黑盒引用，无代码，不可更改</em></strong>)<ul><li>单独DLL</li><li>NuGet(库内DLL存在复杂的依赖关系)</li></ul></li><li>项目引用(<strong><em>白盒引用，有代码，可更改</em></strong>)<ul><li>Class Library</li></ul></li></ul></li></ul></blockquote><h2 id="3-C-语言基本元素"><a href="#3-C-语言基本元素" class="headerlink" title="3. C#语言基本元素"></a>3. C#语言基本元素</h2><ul><li><p>关键字(Keyword)——C#保留字段</p></li><li><p>标识符(Identifier)——用户定义</p><blockquote><ul><li><p><em>命名要有实际意义，辨识度要高。</em></p></li><li><p><em>C#规定：名称空间、方法、类、字段、属性用<strong>Pascal命名法</strong>如：<code>MyTool</code>，变量名用<strong>驼峰法</strong>如：<code>myTool</code>。</em></p></li><li><p><em>Java一般都用驼峰法。</em></p></li></ul></blockquote></li><li><p>文本(字面值)：整数、实数、字符、字符串、布尔、空(null)</p></li><li><p>操作符(Operator：计算、关系、逻辑、条件、赋值等等</p></li><li><p>标点符号：<code>,</code>、<code>;</code>、<code>{}</code></p></li><li><p>语句：</p></li><li><ul><li><strong><em>声明语句</em></strong>，用于声明局部变量和常量。</li><li><strong><em>表达式语句</em></strong>，<em>包括方法调用、使用 <code>new</code> 运算符的对象分配、使用 <code>=</code> 和复合赋值运算符的赋值、使用 <code>++</code> 和 <code>--</code> 运算符和 <code>await</code> 表达式的递增和递减运算。</em></li><li><strong><em>选择语句</em></strong>，<em>包括 <code>if</code> 和 <code>switch</code> 语句。</em></li><li><strong><em>迭代语句</em></strong>，<em>包括 <code>while</code>、<code>do</code>、<code>for</code> 和 <code>foreach</code> 语句。</em></li><li><strong><em>跳转语句</em></strong>，<em>包括 <code>break</code>、<code>continue</code>、<code>goto</code>、<code>throw</code>、<code>return</code> 和 <code>yield</code> 语句。</em></li><li><em><code>try</code>…<code>catch</code> 语句，用于捕获在代码块执行期间发生的异常，<code>try</code>…<code>finally</code> 语句用于指定始终执行的最终代码，无论异常发生与否。</em></li><li>……</li></ul></li><li><p>注释</p><ul><li>单行注释: <code>//string str;</code></li><li>块注释: <code>/*string str;*/</code></li></ul></li></ul><h2 id="4-数据类型、变量、对象"><a href="#4-数据类型、变量、对象" class="headerlink" title="4. 数据类型、变量、对象"></a>4. 数据类型、变量、对象</h2><ul><li><p>2大数据类型</p><ul><li><p><strong>引用类型</strong></p><ul><li><p>类类型(Classes)——关键字：<code>class</code>，特别注意字符串<code>string</code>也是类类型</p></li><li><p>接口类型(Interfaces)——关键字：<code>interface</code></p></li><li><p>委托类型(Delegates)——关键字：<code>delegate</code></p></li><li><p>数组类型——一维数组 <code>int[]</code>、一维数组构成的一维数组:<code>int[][]</code>…</p><blockquote><p><em><code>class</code>、<code>struct</code>、<code>interface</code> 和 <code>delegate</code> 类型全部都<strong>支持泛型</strong>，因此可以使用其他类型对它们进行参数化。</em></p></blockquote></li></ul></li><li><p><strong>值类型</strong></p><ul><li>简单类型——整型、浮点型、字符型、布尔型…</li><li>结构类型(Structures)——关键字：<code>struct</code></li><li>枚举类型(Enumerations)——关键字：<code>enum</code></li></ul></li></ul></li><li><p>变量、对象与内存</p><ul><li>变量——表明了存储位置+类型</li><li>值类型的变量——没有实例，即不需要使用<code>new</code></li><li>引用类型的变量——需要<strong>实例化</strong>，其存储的数据是<strong>对象的内存地址</strong></li><li>变量存储位置——局部变量在栈(stack)，成员变量在堆</li><li>变量默认值——局部变量无默认值，成员变量有默认值</li></ul></li></ul><h2 id="5-类、对象、类成员"><a href="#5-类、对象、类成员" class="headerlink" title="5. 类、对象、类成员"></a>5. 类、对象、类成员</h2><ul><li><p>类与对象</p><blockquote><p>即抽象模型与具体实例的关系，对象是类通过<code>new</code>实例化后生成的。</p></blockquote></li><li><p>类的三大成员</p><ul><li>属性(Property)——数据</li><li>方法(Method)——方法</li><li>事件(Event)——通知其他类或对象</li></ul></li><li><p>静态成员、实例成员</p><ul><li>静态成员(Static)——类所属</li><li>实例成员——对象所属</li><li><code>.</code>操作符——成员访问</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法总结(更新中)</title>
      <link href="/2019/12/20/ruan-jian-gong-ju/markdown/markdown-yu-fa-zong-jie-geng-xin-zhong/"/>
      <url>/2019/12/20/ruan-jian-gong-ju/markdown/markdown-yu-fa-zong-jie-geng-xin-zhong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前学算法的时候经常用CSDN写一些总结，用了一段时间后觉得内置的编辑工具排版很不顺手，后来就慢慢的不再用它写东西了。之后自己就一直在找一些搭建个人博客的方法、工具、开源项目，想着做一个个人主页，也能把自己的一些想法和学习总结放在上面。</p><p>搭建个人主页的花了我近3个月的时间，从使用GitHub个人仓储Fork别人的Blog开源项目，到租用阿里云云服务器使用WordPress套用现成的模板，再到最后使用Halo完成个人主页。</p><p>开始鼓捣的时间是2019年的暑假，正好是我们石油工程专业进行生产实习的那段时间，白天去气站学习、公司参观，晚上回来就打开电脑开始看Fork来的HTML项目。这对于我这个只学过编程语言基础的外行来说真的是很难，大部分的时间都是更改一处，刷新一遍，就这样一直重复到完成各项设置、绑定域名访问。尽管过程很拖沓，但这次经历也让我完善了自己的GitHub账号，了解了一些常规的操作，也申请到了我的第一个域名—–<a href="http://www.oilvoice.top/" target="_blank" rel="noopener">oilvoice.top</a>。</p><p>由于使用了GitHub托管，并没有用到云服务器。但是相应的，访问速度很慢，图片加载速度很慢。最重要的是没有控制台，使得一些操作变得很麻烦，这也是我放弃使用它的主要原因。后来尝试了在阿里云服务器上使用WP镜像，控制台倒是有了，功能也挺强大的，但是网页主题模板我觉得设置起来太难了，关键也没找到我喜欢的模板。也被我给毙掉了。在这之后，我就暂时停止了这个没啥意义的工作，开始忙起了学校的事情。</p><p>有一次在看微信公众号推送的时候，看到了一份某月GitHub大火的项目榜单，其中就有<a href="https://halo.run/" target="_blank" rel="noopener">Halo</a>,我当时默默地打开了GitHub点了个Star。后面就花了不到一个月的时间完成了网站备案、个人主页项目部署。项目部署的过程中也踩了很多坑，猜猜是什么？没错，最多的就是服务器的问题。后续就开始对网站内容进行了大致的规划，在写这篇稿子的时候，网站样式仍然在更改中…</p><h2 id="Markdown它又来了"><a href="#Markdown它又来了" class="headerlink" title="Markdown它又来了"></a>Markdown它又来了</h2><p>本以为可以逃脱使用Markdown，结果发现它真的哪哪儿都在用。</p><p>下面就总结以下自己暂时用到过的一些语法，不过其实可以下载专用的编辑器，比如我正在使用的<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>就挺不错的。</p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><ul><li>看起来舒服、语法简单，像极了性冷淡风格；  </li><li>兼容HTML,可以转换为HTML格式发布；  </li><li>跨平台使用；  </li><li>越来越多的网站支持Markdown。  </li></ul><h3 id="2-语法归纳"><a href="#2-语法归纳" class="headerlink" title="2.语法归纳"></a>2.语法归纳</h3><table><thead><tr><th align="center">目标</th><th align="center">语法效果</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">标题</td><td align="center"><strong># 一级标题</strong></td><td align="center">#+空格+标题，1-6个 #代表1-6级标题</td></tr><tr><td align="center">字体</td><td align="center"><strong>加粗字体</strong></td><td align="center">字体左右各加2个 *</td></tr><tr><td align="center"></td><td align="center"><em>斜体</em></td><td align="center">字体左右各加1个 *</td></tr><tr><td align="center"></td><td align="center"><strong><em>加粗斜体</em></strong></td><td align="center">字体左右各加3个 *</td></tr><tr><td align="center"></td><td align="center"><del>删除线</del></td><td align="center">字体左右各加2个 ~</td></tr><tr><td align="center">换行</td><td align="center"></td><td align="center">在当前行的结尾加 2 个空格后回车</td></tr><tr><td align="center">分割线</td><td align="center"></td><td align="center">新起一行输入三个 -</td></tr><tr><td align="center">引用</td><td align="center"></td><td align="center">&gt; + 空格 + 引用文字。引用里可以嵌套引用、列表、代码、代码块</td></tr><tr><td align="center">列表</td><td align="center">无序列表</td><td align="center">减号+空格；或 加号+空格；或 *+空格</td></tr><tr><td align="center"></td><td align="center">有序列表</td><td align="center">数字+空格</td></tr><tr><td align="center">表格</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">图片</td><td align="center"><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></td><td align="center"><code>![名称](路径)</code></td></tr><tr><td align="center">图标</td><td align="center">:-1:</td><td align="center">Emoji的文字形式转化为图片形式<code>:-1：</code> ，详见<a href="https://emoji.svend.cc" target="_blank" rel="noopener">https://emoji.svend.cc</a></td></tr><tr><td align="center">超链接</td><td align="center"><a href="http://www.oilvoice.top" target="_blank" rel="noopener">这是链接</a></td><td align="center">文字链接： [链接名称]+(http://链接网址) ；网址链接： &lt; http://链接网址 &gt;</td></tr><tr><td align="center">代码</td><td align="center"><code>单行代码</code></td><td align="center">代码内容左右各加1个 `</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">用 上下各一段```包裹一段代码，并指定一种语言（指定后可实现高亮）</td></tr><tr><td align="center">其他</td><td align="center"></td><td align="center">比如：流程图、公式、HTML …</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mrkdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建-主题matery</title>
      <link href="/2019/09/28/qian-duan/hexo-bo-ke-da-jian-zhu-ti-matery/"/>
      <url>/2019/09/28/qian-duan/hexo-bo-ke-da-jian-zhu-ti-matery/</url>
      
        <content type="html"><![CDATA[<p><a href="README.md">English Document</a> | <a href="https://blinkfox.github.io/" target="_blank" rel="noopener">演示示例</a> | QQ交流群:<code>926552981</code></p><blockquote><p>这是一个采用<code>Material Design</code>和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>4.7.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7 </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 列表最大高度</span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h2><ul><li>v1.0.0<ul><li>新增了所有基础功能；</li></ul></li><li>v1.0.1<ul><li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li><li>新增代码是否折行为可配置，默认为折行；</li><li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li><li>修复文章滚动时，高亮的目录选项不准确的问题；</li><li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li></ul></li><li>v1.0.2<ul><li>升级了 <a href="https://materializecss.com/" target="_blank" rel="noopener">Materialize</a> 框架版本为<code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li><li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li><li>修复首页第一个按钮是中文的问题</li><li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li><li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li><li>修复一些文章或 UI 显示问题；</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> hexo-theme-matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git知识点整理</title>
      <link href="/2018/09/24/ruan-jian-gong-ju/git/git-zhi-shi-dian-zheng-li/"/>
      <url>/2018/09/24/ruan-jian-gong-ju/git/git-zhi-shi-dian-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Git基本概念。"><a href="#1-Git基本概念。" class="headerlink" title="1. Git基本概念。"></a>1. Git基本概念。</h2><ul><li><code>repository</code></li><li><code>config</code></li><li><code>init</code></li><li><code>clone</code></li><li><code>fetch</code></li><li><code>pull</code></li><li><code>commit</code></li><li><code>push</code></li><li><code>branch</code></li><li><code>head</code></li><li><code>tag</code></li><li><code>merge</code></li><li><code>conflict</code></li><li><code>diff</code></li><li><code>log</code></li><li><code>show</code></li><li><code>status</code></li></ul><h2 id="2-Git工作空间和文件状态"><a href="#2-Git工作空间和文件状态" class="headerlink" title="2. Git工作空间和文件状态"></a>2. Git工作空间和文件状态</h2><h3 id="1-工作空间"><a href="#1-工作空间" class="headerlink" title="(1).工作空间"></a>(1).工作空间</h3><p><img src="http://blog.chinaunix.net/attachment/201402/19/10415985_139279770639pM.jpg" alt="Git工作空间"></p><p>左侧为工作区，右侧为版本库。</p><ul><li>工作区（<code>Working Directory</code>） 就是在电脑里能看到的目录，比如learngit文件夹就是一个工作区。</li><li>版本库（<code>Repository</code>）工作区有一个隐藏目录<code>.git</code>，是Git的版本库。</li></ul><p>在版本库中标记为<code>index</code>的区域为暂存区，标记为<code>master</code>的是Git为我们自动创建的第一个分支，代表的是目录树。此时<code>HEAD</code>实际是指向<code>master</code>分支的一个“游标”，所以图示的命令中出现HEAD的地方可以用<code>master</code>来替换。图中的objects标识的区域为git的对象库，实际位于<code>.git/objects</code>目录下。</p><ul><li>当对工作区修改（或新增）的文件执行<code>git add</code>命令时，暂存区的目录树会被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的id被记录在暂存区的文件索引中。</li><li>当执行提交操作<code>git commit</code>时，暂存区的目录树会写到版本库（对象库）中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区的目录树。</li><li>当执行<code>git reset HEAD</code>命令时，暂存区的目录树会被重写，会被master分支指向的目录树所替换，但是工作区不受影响。</li><li>当执行<code>git rm --cached</code>命令时，会直接从暂存区删除文件，工作区则不做出改变。</li><li>当执行<code>git checkout .</code>或<code>git checkout --</code> 命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。</li><li>当执行<code>git checkout HEAD .</code>或<code>git checkout HEAD</code>命令时，会用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极度危险的。因为不但会清楚工作区中未提交的改动，也会清楚暂存区中未提交的改动。</li></ul><h3 id="1-文件状态"><a href="#1-文件状态" class="headerlink" title="(1).文件状态"></a>(1).文件状态</h3><p>Git 有三种状态，你的文件可能处于其中之一：<strong>已提交(<code>committed</code>)</strong>、<strong>已修改(<code>modified</code>)</strong>和<strong>已暂存(<code>staged</code>)</strong>。</p><h2 id="3-Git配置系统级、全局、当前仓库用户名、邮箱的命令"><a href="#3-Git配置系统级、全局、当前仓库用户名、邮箱的命令" class="headerlink" title="3. Git配置系统级、全局、当前仓库用户名、邮箱的命令"></a>3. Git配置系统级、全局、当前仓库用户名、邮箱的命令</h2><p>系统级、全局、当前仓库选项分别是:仓库-system、-global、-local(或默认不填)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Jerry Mouse"</span><span class="token function">git</span> config --global user.email <span class="token string">"jerry@yiibai.com"</span></code></pre><p>列出Git设置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --list<span class="token function">git</span> config -l</code></pre><h2 id="4-Git-fetch和pull的区别"><a href="#4-Git-fetch和pull的区别" class="headerlink" title="4. Git fetch和pull的区别"></a>4. Git fetch和pull的区别</h2><ul><li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动merge.</li><li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地.</li></ul><h3 id="1-git-fetch示例："><a href="#1-git-fetch示例：" class="headerlink" title="(1). git fetch示例："></a>(1). git fetch示例：</h3><pre class=" language-bash"><code class="language-bash">Git fetch origin master<span class="token function">git</span> log -p master<span class="token punctuation">..</span>origin/master<span class="token function">git</span> merge origin/master</code></pre><p>以上命令的含义：</p><ul><li>首先从远程的<code>origin</code>的<code>master</code>主分支下载最新的版本到<code>origin/master</code>分支上</li><li>然后比较本地的<code>master</code>分支和<code>origin/master</code>分支的差别</li><li>最后进行合并</li><li>上述过程其实可以用以下更清晰的方式来进行：</li></ul><h3 id="1-git-pull示例："><a href="#1-git-pull示例：" class="headerlink" title="(1). git pull示例："></a>(1). git pull示例：</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master</code></pre><p>上述命令其实相当于<code>git fetch</code>和<code>git merge</code>。在实际使用中，<code>git fetch</code>更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。</p><h2 id="5-Git-reset和revert的却别"><a href="#5-Git-reset和revert的却别" class="headerlink" title="5. Git reset和revert的却别"></a>5. Git reset和revert的却别</h2><ul><li><code>git revert</code>是用一次新的commit来回滚之前的commit，<code>git reset</code>是直接删除指定的commit。 </li><li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为<code>git revert</code>是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是<code>git reset</code>是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</li><li><code>git reset</code>是把HEAD向后移动了一下，而<code>git revert</code>是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li><li>git revert与git reset最大的不同是，git revert 仅仅是撤销某次提交。</li></ul><p>另外，说一下<code>git revert</code>， <code>git reset –hard</code>和 <code>–soft</code>的区别</p><ul><li><code>git reset –mixed id</code>: 是将git的HEAD变了（也就是提交记录变了），但文件并没有改变，（也就是working tree并没有改变）。</li><li><code>git reset –soft id</code>: 实际上，是<code>git reset –mixed id</code>后，又做了一次<code>git add</code>。</li><li><code>git reset –herd id</code>: 是将git的HEAD变了，文件也变了。</li></ul><h2 id="6-Git-merge和reabse的相同点和不同点"><a href="#6-Git-merge和reabse的相同点和不同点" class="headerlink" title="6. Git merge和reabse的相同点和不同点"></a>6. Git merge和reabse的相同点和不同点</h2><p><code>merge</code>是合并的意思，<code>rebase</code>是复位基底的意思，相同点都是用来合并分支的。</p><p><img src="http://images2015.cnblogs.com/blog/759200/201608/759200-20160806092734215-279978821.png" alt="merge和rebase"></p><p>不同点:</p><ul><li><code>merge</code>操作会生成一个新的节点，之前的提交分开显示。而<code>rebase</code>操作不会生成新的节点，是将两个分支融合成一个线性的提交。</li><li>解决冲突时。merge操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit就可以了。而<code>rebase</code>操作的话，会中断rebase,同时会提示去解决冲突。解决冲突后,将修改add后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</li><li><code>git pull</code>和<code>git pull --rebase</code>区别：<code>git pull</code>做了两个操作分别是”获取”和”合并”。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。</li></ul><p><strong>总结</strong>：选择 merge 还是 rebase？</p><ul><li>merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容</li><li>merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面</li><li>rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面</li><li>rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面</li><li>merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定</li><li>merge 和 rebase 还有很多强大的选项，可以使用 git help <command> 查看</li></ul><h2 id="7-Git-stash是什么？它的相关使用方式命令"><a href="#7-Git-stash是什么？它的相关使用方式命令" class="headerlink" title="7. Git stash是什么？它的相关使用方式命令"></a>7. Git stash是什么？它的相关使用方式命令</h2><ul><li>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</li><li>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</li><li>git stash pop –index stash@{0}: 恢复编号为0的进度的工作区和暂存区。</li><li>git stash apply stash@{1} 以将你指定版本号为stash@{1}的工作取出来</li><li>git stash drop[<stash>] 删除某一个进度，默认删除最新进度</stash></li><li>git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</li><li>git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 恢复工作进度</span><span class="token function">git</span> stash pop <span class="token punctuation">[</span>--index<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>stash<span class="token operator">></span><span class="token punctuation">]</span>--index 参数：不仅恢复工作区，还恢复暂存区<span class="token operator">&lt;</span>stash<span class="token operator">></span> 指定恢复某一个具体进度。如果没有这个参数，默认恢复最新进度<span class="token comment" spellcheck="true"># 这是git stash保存进度的完整命令形式</span><span class="token function">git</span> stash <span class="token punctuation">[</span>save message<span class="token punctuation">]</span> <span class="token punctuation">[</span>-k<span class="token operator">|</span>--no-keep-index<span class="token punctuation">]</span> <span class="token punctuation">[</span>--patch<span class="token punctuation">]</span>-k和--no-keep-index指定保存进度后，是否重置暂存区--patch 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git add -p命令类似使用save可以对进度添加备注<span class="token comment" spellcheck="true"># git stash save "这是保存的进度"</span></code></pre><h2 id="8-Git只从暂存区删除，从工作空间删除的命令分别是什么"><a href="#8-Git只从暂存区删除，从工作空间删除的命令分别是什么" class="headerlink" title="8. Git只从暂存区删除，从工作空间删除的命令分别是什么?"></a>8. Git只从暂存区删除，从工作空间删除的命令分别是什么?</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> --cached<span class="token function">git</span> <span class="token function">rm</span><span class="token function">git</span> commit</code></pre><h2 id="9-Git标签的使用"><a href="#9-Git标签的使用" class="headerlink" title="9. Git标签的使用"></a>9. Git标签的使用</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出现有的标签</span><span class="token function">git</span> tag<span class="token comment" spellcheck="true"># 打标签</span><span class="token function">git</span> tag -a v1.01 -m <span class="token string">"Relase version 1.01"</span><span class="token comment" spellcheck="true"># 查看相应标签的版本信息</span><span class="token function">git</span> show v1.4</code></pre><ul><li>-a 选项,创建一个含附注类型的标签</li><li>-m 选项,指定了对应的标签说明</li></ul><h2 id="9-Git分支的使用"><a href="#9-Git分支的使用" class="headerlink" title="9. Git分支的使用"></a>9. Git分支的使用</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看本地分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 查看远程分支</span><span class="token function">git</span> branch -r<span class="token comment" spellcheck="true"># 创建本地分支(注意新分支创建后不会自动切换为当前分支)</span><span class="token function">git</span> branch <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 切换分支</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 创建新分支并立即切换到新分支</span><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 强制删除一个分支</span><span class="token function">git</span> branch -D <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 合并分支(将名称为[name]的分支与当前分支合并)</span><span class="token function">git</span> merge <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看各个分支最后提交信息</span><span class="token function">git</span> br -v<span class="token comment" spellcheck="true"># 查看已经被合并到当前分支的分支</span><span class="token function">git</span> br --merged<span class="token comment" spellcheck="true"># 查看尚未被合并到当前分支的分支</span><span class="token function">git</span> br --no-merged</code></pre><h2 id="10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。"><a href="#10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。" class="headerlink" title="10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。"></a>10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。</h2><p>merge和rebase对于ours和theirs的定义是完全相反的。在merge时，ours指代的是当前分支，theirs代表需要被合并的分支。而在rebase过程中，ours指向了修改参考分支，theirs却是当前分支。因为rebase 隐含了一个<code>git checkout upstream</code>的过程，将<code>HEAD</code>从local分支变成了upstream分支。git会在rebase结束后撤销这个改变，但它已经不可避免地影响了冲突的状态，使rebase中ours和theirs的定义与merge 截然相反。因此，在使用ours与theirs时请格外小心。</p><h2 id="11-Git远程操作相关"><a href="#11-Git远程操作相关" class="headerlink" title="11. Git远程操作相关"></a>11. Git远程操作相关</h2><h3 id="1-clone"><a href="#1-clone" class="headerlink" title="(1). clone"></a>(1). clone</h3><blockquote><p>git clone &lt;版本库的网址&gt;<br>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 克隆jQuery的版本库</span> <span class="token function">git</span> clone https://github.com/jquery/jquery.git <span class="token function">git</span> clone -o jQuery https://github.com/jquery/jquery.git</code></pre><h3 id="2-remote"><a href="#2-remote" class="headerlink" title="(2). remote"></a>(2). remote</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有远程主机</span><span class="token function">git</span> remote<span class="token comment" spellcheck="true"># 使用-v选项，可以参看远程主机的网址</span><span class="token function">git</span> remote -v<span class="token comment" spellcheck="true"># 可以查看该主机的详细信息</span><span class="token function">git</span> remote show <span class="token operator">&lt;</span>主机名<span class="token operator">></span><span class="token comment" spellcheck="true"># 添加远程主机</span><span class="token function">git</span> remote add <span class="token operator">&lt;</span>主机名<span class="token operator">></span> <span class="token operator">&lt;</span>网址<span class="token operator">></span><span class="token comment" spellcheck="true"># 删除远程主机</span><span class="token function">git</span> remote <span class="token function">rm</span> <span class="token operator">&lt;</span>主机名<span class="token operator">></span><span class="token comment" spellcheck="true"># 修改远程主机名称</span><span class="token function">git</span> remote <span class="token function">rename</span> <span class="token operator">&lt;</span>原主机名<span class="token operator">></span> <span class="token operator">&lt;</span>新主机名<span class="token operator">></span></code></pre><h3 id="3-fetch"><a href="#3-fetch" class="headerlink" title="(3). fetch"></a>(3). fetch</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 取回所有分支(branch)的更新到本地</span><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span><span class="token comment" spellcheck="true"># 取回某的特定分支的更新</span><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>分支名<span class="token operator">></span><span class="token comment" spellcheck="true"># 取回origin主机的master分支的更新</span><span class="token function">git</span> fetch origin master<span class="token comment" spellcheck="true"># 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支</span><span class="token function">git</span> merge origin/master<span class="token function">git</span> rebase origin/master</code></pre><h3 id="4-pull"><a href="#4-pull" class="headerlink" title="(4). pull"></a>(4). pull</h3><blockquote><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 取回origin主机的next分支，与本地的master分支合并</span><span class="token function">git</span> pull origin next:master<span class="token comment" spellcheck="true"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span><span class="token function">git</span> pull origin next<span class="token comment" spellcheck="true"># 上面的命令实质上等同于先做git fetch，再做git merge。</span><span class="token function">git</span> fetch origin<span class="token function">git</span> merge origin/next<span class="token comment" spellcheck="true"># 合并需要采用rebase模式</span><span class="token function">git</span> pull --rebase <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">></span>:<span class="token operator">&lt;</span>本地分支名<span class="token operator">></span></code></pre><h3 id="5-push"><a href="#5-push" class="headerlink" title="(5). push"></a>(5). push</h3><blockquote><p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p></blockquote><p><strong>注意</strong>:分支推送顺序的写法是”&lt;来源地&gt;:&lt;目的地&gt;”，所以git pull是”&lt;远程分支&gt;:&lt;本地分支&gt;”，而git push是”&lt;本地分支&gt;:&lt;远程分支&gt;”。</p><ul><li>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</li><li>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建</span><span class="token function">git</span> push origin master<span class="token comment" spellcheck="true"># 省略了本地分支，以下等同，删除origin主机的master分支</span><span class="token function">git</span> push origin :master<span class="token function">git</span> push origin --delete master<span class="token comment" spellcheck="true"># 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略</span><span class="token function">git</span> push origin<span class="token comment" spellcheck="true"># 如果当前分支只有一个追踪分支，那么主机名都可以省略。</span><span class="token function">git</span> push<span class="token comment" spellcheck="true"># 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push</span><span class="token function">git</span> push -u origin master<span class="token comment" spellcheck="true"># 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机</span><span class="token function">git</span> push --all origin<span class="token comment" spellcheck="true"># 强制推送</span><span class="token function">git</span> push --force origin<span class="token comment" spellcheck="true"># git push不会推送标签(tag)，除非使用–tags选项</span><span class="token function">git</span> push origin --tags</code></pre><h2 id="12-Git-Flow使用简介"><a href="#12-Git-Flow使用简介" class="headerlink" title="12. Git Flow使用简介"></a>12. Git Flow使用简介</h2><p>就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范。三种广泛使用的工作流程：</p><ul><li>Git flow</li><li>Github flow</li><li>Gitlab flow</li></ul><p>三种工作流程，有一个共同点：都采用”功能驱动式开发”（Feature-driven development，简称FDD）。它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。最早诞生、并得到广泛采用的一种工作流程，就是<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Git flow</a>。</p><p>它最主要的特点有两个。首先，项目存在两个长期分支，分别是：主分支master、开发分支develop。其次，项目存在三种短期分支，分别是：功能分支（feature branch）、补丁分支（hotfix branch）、预发分支（release branch），一旦完成开发，它们就会被合并进develop或master，然后被删除。</p><h3 id="1-Git-Flow流程图"><a href="#1-Git-Flow流程图" class="headerlink" title="(1). Git Flow流程图"></a>(1). Git Flow流程图</h3><p><img src="http://static.blinkfox.com/ghost/imagegit_flow.png" alt="Git Flow流程图"></p><h3 id="2-Git-Flow常用的分支"><a href="#2-Git-Flow常用的分支" class="headerlink" title="(2). Git Flow常用的分支"></a>(2). Git Flow常用的分支</h3><ul><li><code>Production</code>分支。也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。</li><li><code>Develop</code>分支。这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支。</li><li><code>Feature</code>分支。这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release。</li><li><code>Release</code>分支。当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支。</li><li><code>Hotfix</code>分支。当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release。</li></ul><h3 id="3-Git-Flow代码示例"><a href="#3-Git-Flow代码示例" class="headerlink" title="(3). Git Flow代码示例"></a>(3). Git Flow代码示例</h3><h4 id="a-创建develop分支"><a href="#a-创建develop分支" class="headerlink" title="a. 创建develop分支"></a>a. 创建develop分支</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch develop<span class="token function">git</span> push -u origin develop</code></pre><h4 id="b-开始新Feature开发"><a href="#b-开始新Feature开发" class="headerlink" title="b. 开始新Feature开发"></a>b. 开始新Feature开发</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b some-feature develop<span class="token comment" spellcheck="true"># Optionally, push branch to origin:</span><span class="token function">git</span> push -u origin some-feature<span class="token comment" spellcheck="true"># 做一些改动</span><span class="token function">git</span> status<span class="token function">git</span> add some-file<span class="token function">git</span> commit</code></pre><h4 id="c-完成Feature"><a href="#c-完成Feature" class="headerlink" title="c. 完成Feature"></a>c. 完成Feature</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull origin develop<span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff some-feature<span class="token function">git</span> push origin develop<span class="token function">git</span> branch -d some-feature<span class="token comment" spellcheck="true"># If you pushed branch to origin:</span><span class="token function">git</span> push origin --delete some-feature</code></pre><h4 id="d-开始Relase"><a href="#d-开始Relase" class="headerlink" title="d. 开始Relase"></a>d. 开始Relase</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b release-0.1.0 develop<span class="token comment" spellcheck="true"># Optional: Bump version number, commit</span><span class="token comment" spellcheck="true"># Prepare release, commit</span></code></pre><h4 id="e-完成Release"><a href="#e-完成Release" class="headerlink" title="e. 完成Release"></a>e. 完成Release</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout master<span class="token function">git</span> merge --no-ff release-0.1.0<span class="token function">git</span> push<span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff release-0.1.0<span class="token function">git</span> push<span class="token function">git</span> branch -d release-0.1.0<span class="token comment" spellcheck="true"># If you pushed branch to origin:</span><span class="token function">git</span> push origin --delete release-0.1.0   <span class="token function">git</span> tag -a v0.1.0 master<span class="token function">git</span> push --tags</code></pre><h4 id="f-开始Hotfix"><a href="#f-开始Hotfix" class="headerlink" title="f. 开始Hotfix"></a>f. 开始Hotfix</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b hotfix-0.1.1 master</code></pre><h4 id="g-完成Hotfix"><a href="#g-完成Hotfix" class="headerlink" title="g. 完成Hotfix"></a>g. 完成Hotfix</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout master<span class="token function">git</span> merge --no-ff hotfix-0.1.1<span class="token function">git</span> push<span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff hotfix-0.1.1<span class="token function">git</span> push<span class="token function">git</span> branch -d hotfix-0.1.1<span class="token function">git</span> tag -a v0.1.1 master<span class="token function">git</span> push --tags</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
